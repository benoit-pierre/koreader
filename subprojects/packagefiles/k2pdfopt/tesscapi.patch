diff --git a/include_mod/tesseract.h b/include_mod/tesseract.h
index 72bfc5bb..a695bbdb 100644
--- a/include_mod/tesseract.h
+++ b/include_mod/tesseract.h
@@ -18,6 +18,9 @@ void *tess_capi_init(char *datapath,char *language,int ocr_type,FILE *out,
 int tess_capi_get_ocr(void *api,PIX *pix,char *outstr,int maxlen,FILE *out);
 void tess_capi_end(void *api);
 
+const char* tess_capi_get_init_language(void *api);
+int tess_capi_get_word_boxes(void *api, PIX *pix, BOXA **out_boxa, int is_cjk, FILE *out);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/tesseract_mod/tesscapi.cpp b/tesseract_mod/tesscapi.cpp
index cd2aa394..71ea627a 100644
--- a/tesseract_mod/tesscapi.cpp
+++ b/tesseract_mod/tesscapi.cpp
@@ -44,9 +44,6 @@
 
 #include "allheaders.h"
 #include "baseapi.h"
-#include "strngs.h"
-#include "params.h"
-#include "blobs.h"
 /*
 #include "notdll.h"
 */
@@ -54,6 +51,9 @@
 /* C Wrappers */
 #include "tesseract.h"
 
+// For our try/catch block
+#include <stdexcept>
+
 // static tesseract::TessBaseAPI api[4];
 
 /*
@@ -202,6 +202,45 @@ int tess_capi_get_ocr(void *vapi,PIX *pix,char *outstr,int maxlen,FILE *out)
     return(0);
     }
 
+int tess_capi_get_word_boxes(void *vapi, PIX *pix, BOXA **out_boxa, int is_cjk, FILE *out)
+
+    {
+    if (vapi==NULL)
+        return -1;
+
+    tesseract::TessBaseAPI *api;
+    api=(tesseract::TessBaseAPI *)vapi;
+    try {
+        api->InitForAnalysePage();
+        api->SetPageSegMode(tesseract::PSM_AUTO);
+        api->SetImage(pix);
+        if (is_cjk) {
+            api->SetVariable("textord_use_cjk_fp_model","1");
+            *out_boxa = api->GetConnectedComponents(NULL);
+        } else {
+            api->SetVariable("textord_use_cjk_fp_model","0");
+            *out_boxa = api->GetWords(NULL);
+        }
+    } catch (const std::exception &e) {
+       if (out!=NULL)
+           fprintf(out,"tesscapi:  Error during page segmentation. %s\n", e.what());
+       api->Clear();
+       return -1;
+    }
+    printf("engine inited in %s\n", api->GetInitLanguagesAsString());
+    api->ClearAdaptiveClassifier();
+    api->Clear();
+    return(0);
+    }
+
+const char* tess_capi_get_init_language(void *vapi) {
+    if (vapi==NULL)
+        return "";
+
+    tesseract::TessBaseAPI *api;
+    api=(tesseract::TessBaseAPI *)vapi;
+    return api->GetInitLanguagesAsString();
+}
 
 void tess_capi_end(void *vapi)
 
