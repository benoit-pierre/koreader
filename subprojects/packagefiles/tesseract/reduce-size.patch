diff --git a/src/ccutil/globaloc.cpp b/src/ccutil/globaloc.cpp
--- a/src/ccutil/globaloc.cpp
+++ b/src/ccutil/globaloc.cpp
@@ -27,12 +27,15 @@
 #include "errcode.h"
 #include "tprintf.h"
 
+#if 0
 // Size of thread-id array of pixes to keep in case of crash.
 const int kMaxNumThreadPixes = 32768;
 
 static Pix* global_crash_pixes[kMaxNumThreadPixes];
+#endif
 
 void SavePixForCrash(int resolution, Pix* pix) {
+#if 0
 #ifdef __linux__
 #ifndef ANDROID
   int thread_id = syscall(SYS_gettid) % kMaxNumThreadPixes;
@@ -47,12 +50,14 @@ void SavePixForCrash(int resolution, Pix* pix) {
     global_crash_pixes[thread_id] = clone;
   }
 #endif
+#endif
 }
 
 // CALL ONLY from a signal handler! Writes a crash image to stderr.
 void signal_exit(int signal_code) {
   tprintf("Received signal %d!\n", signal_code);
 #ifdef __linux__
+#if 0
 #ifndef ANDROID
   int thread_id = syscall(SYS_gettid) % kMaxNumThreadPixes;
 #else
@@ -66,6 +71,7 @@ void signal_exit(int signal_code) {
     fprintf(stderr, "\n<End cut>\n");
   }
   // Raise an uncaught signal, so as to get a useful stack trace.
+#endif
   raise(SIGILL);
 #else
   abort();
diff --git a/src/classify/protos.cpp b/src/classify/protos.cpp
--- a/src/classify/protos.cpp
+++ b/src/classify/protos.cpp
@@ -42,7 +42,9 @@
 /*----------------------------------------------------------------------
               V a r i a b l e s
 ----------------------------------------------------------------------*/
+#if 0
 CLASS_STRUCT TrainingData[NUMBER_OF_CLASSES];
+#endif
 
 STRING_VAR(classify_training_file, "MicroFeatures", "Training file");
 
diff --git a/src/classify/protos.h b/src/classify/protos.h
--- a/src/classify/protos.h
+++ b/src/classify/protos.h
@@ -79,7 +79,9 @@ using CLASSES = CLASS_STRUCT*;
 /*----------------------------------------------------------------------
               V a r i a b l e s
 ----------------------------------------------------------------------*/
+#if 0
 extern CLASS_STRUCT TrainingData[];
+#endif
 
 extern STRING_VAR_H(classify_training_file, "MicroFeatures", "Training file");
 
@@ -102,6 +104,7 @@ extern STRING_VAR_H(classify_training_file, "MicroFeatures", "Training file");
 
 #define RemoveProtoFromConfig(Pid, Config) (reset_bit(Config, Pid))
 
+#if 0
 /**
  * ClassOfChar
  *
@@ -110,6 +113,7 @@ extern STRING_VAR_H(classify_training_file, "MicroFeatures", "Training file");
 
 #define ClassOfChar(Char) \
   ((TrainingData[Char].NumProtos) ? (&TrainingData[Char]) : NO_CLASS)
+#endif
 
 /**
  * ProtoIn
