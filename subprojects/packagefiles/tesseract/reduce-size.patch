diff --git a/ccutil/globaloc.cpp b/ccutil/globaloc.cpp
index 13366134..05128232 100644
--- a/ccutil/globaloc.cpp
+++ b/ccutil/globaloc.cpp
@@ -26,12 +26,15 @@
 #include          "errcode.h"
 #include          "tprintf.h"
 
+#if 0
 // Size of thread-id array of pixes to keep in case of crash.
 const int kMaxNumThreadPixes = 32768;
 
 Pix* global_crash_pixes[kMaxNumThreadPixes];
+#endif
 
 void SavePixForCrash(int resolution, Pix* pix) {
+#if 0
 #ifdef __linux__
 #ifndef ANDROID
   int thread_id = syscall(SYS_gettid) % kMaxNumThreadPixes;
@@ -46,12 +49,14 @@ void SavePixForCrash(int resolution, Pix* pix) {
     global_crash_pixes[thread_id] = clone;
   }
 #endif
+#endif
 }
 
 // CALL ONLY from a signal handler! Writes a crash image to stderr.
 void signal_exit(int signal_code) {
   tprintf("Received signal %d!\n", signal_code);
 #ifdef __linux__
+#if 0
 #ifndef ANDROID
   int thread_id = syscall(SYS_gettid) % kMaxNumThreadPixes;
 #else
@@ -65,6 +70,7 @@ void signal_exit(int signal_code) {
     fprintf(stderr, "\n<End cut>\n");
   }
   // Raise an uncaught signal, so as to get a useful stack trace.
+#endif
   raise(SIGILL);
 #else
   abort();
diff --git a/classify/protos.cpp b/classify/protos.cpp
index 6291f12c..482b5024 100644
--- a/classify/protos.cpp
+++ b/classify/protos.cpp
@@ -45,7 +45,9 @@
 /*----------------------------------------------------------------------
               V a r i a b l e s
 ----------------------------------------------------------------------*/
+#if 0
 CLASS_STRUCT TrainingData[NUMBER_OF_CLASSES];
+#endif
 
 STRING_VAR(classify_training_file, "MicroFeatures", "Training file");
 
diff --git a/classify/protos.h b/classify/protos.h
index bb2f56b5..8a387512 100644
--- a/classify/protos.h
+++ b/classify/protos.h
@@ -77,7 +77,9 @@ typedef CLASS_STRUCT *CLASSES;
 /*----------------------------------------------------------------------
               V a r i a b l e s
 ----------------------------------------------------------------------*/
+#if 0
 extern CLASS_STRUCT TrainingData[];
+#endif
 
 extern STRING_VAR_H(classify_training_file, "MicroFeatures", "Training file");
 
@@ -102,6 +104,7 @@ extern STRING_VAR_H(classify_training_file, "MicroFeatures", "Training file");
 #define RemoveProtoFromConfig(Pid,Config)	\
 (reset_bit (Config, Pid))
 
+#if 0
 /**
  * ClassOfChar
  *
@@ -112,6 +115,7 @@ extern STRING_VAR_H(classify_training_file, "MicroFeatures", "Training file");
 ((TrainingData [Char].NumProtos) ? \
 	(& TrainingData [Char])         : \
 	NO_CLASS)
+#endif
 
 /**
  * ProtoIn
