name: Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  pull_request:
  schedule:
    # Every Friday at 21:30 (UTC).
    - cron: '30 21 * * 4'
  workflow_dispatch:
    inputs:
      jobs:
        description: 'Run the specified list of job ids'
        required: false
        type: string
      publish:
        description: 'Publish an OTA release to GitHub'
        required: false
        default: false
        type: boolean

defaults:
  run:
    shell: bash

jobs:

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          clean: false
          fetch-depth: 1
          show-progress: false
          sparse-checkout: |
            .ci
            .github/workflows
      - name: Generate outputs
        id: generate
        env:
          # Default jobs to run.
          base_jobs: >
            lint
            emu-gcc
            appimage-x86_64
            android-arm android-arm64
            kindlepw2
            macos-arm64 macos-x86_64
          # Extra jobs when on master.
          master_extra_jobs:
        run: |
          set -o noglob
          jobs=(${{
            inputs.jobs && inputs.jobs ||
              (github.event.schedule && '.*' ||
                format('{0} {1}', env.base_jobs, github.ref_name == 'master' && env.master_extra_jobs || ''))
          }})
          set +o noglob
          >>"${GITHUB_OUTPUT}" ./.ci/build.prepare.sh .ci/build.jobs.yml "${jobs[@]}"
    outputs:
      lint: ${{ steps.generate.outputs.lint }}
      emulator: ${{ steps.generate.outputs.emulator }}
      macos: ${{ steps.generate.outputs.macos }}
      platform: ${{ steps.generate.outputs.platform }}

  lint:
    name: Lint
    needs: prepare
    if: needs.prepare.outputs.lint
    uses: ./.github/workflows/build.lint.yml

  emulator:
    name: Emulator
    needs: [prepare, lint]
    if: |
      !cancelled() &&
      needs.prepare.outputs.emulator &&
      contains('skipped success', needs.lint.result)
    uses: ./.github/workflows/build.matrix.yml
    with:
      jobs: ${{ needs.prepare.outputs.emulator }}
      fail_fast: true

  macos:
    name: macOS
    needs: [prepare, lint, emulator]
    if: |
      !cancelled() &&
      needs.prepare.outputs.macos &&
      contains('skipped success', needs.lint.result) &&
      contains('skipped success', needs.emulator.result)
    uses: ./.github/workflows/build.matrix.yml
    with:
      jobs: ${{ needs.prepare.outputs.macos }}

  platform:
    name: Platform
    needs: [prepare, lint, emulator]
    if: |
      !cancelled() &&
      needs.prepare.outputs.platform &&
      contains('skipped success', needs.lint.result) &&
      contains('skipped success', needs.emulator.result)
    uses: ./.github/workflows/build.matrix.yml
    with:
      jobs: ${{ needs.prepare.outputs.platform }}

  release:
    name: Release
    needs: [emulator, macos, platform]
    if: |
      inputs.publish && !cancelled() &&
      contains('skipped success', needs.lint.result) &&
      contains('skipped success', needs.emulator.result) &&
      contains('skipped success', needs.macos.result) &&
      contains('skipped success', needs.platform.result)
    permissions:
      contents: write
    uses: ./.github/workflows/build.release.yml

# vim: foldmethod=marker foldlevel=0
