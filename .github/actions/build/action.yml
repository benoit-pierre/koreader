inputs:

  # Required.

  name:
    required: true

  target:
    required: true

  # Optional.

  cache_extra_key:
    default: ''

  extra_packages:
    default: ''

  extra_setup:
    default: ''

  target_options:
    default: ''

  tests:
    default: ''

  update_artifacts:
    default: ''

  update_target:
    default: ''

  # Internal.

  cache_epoch:
    default: '0' # increment to reset all caches

  ccache_version:
    default: '4.8.3'

  python_version:
    default: '3'

  sevenzip_version:
    default: '17.05'

  uber_apk_signer_version:
    default: '1.3.0'

  unshallow_depth:
    default: 500

  subprojects_cache_paths:
    default: |
      subprojects/*
      !subprojects/crengine
      !subprojects/koreader-runtests
      !subprojects/lua-ljsqlite3
      !subprojects/packagecache
      !subprojects/packagefiles

  build_cache_paths:
    default: |
      koreader-*/koreader/

  shell:
    default: bash --noprofile --norc -eo pipefail kodev ci shell . {0}

runs:

  using: "composite"

  steps:

    # Setup environment. {{{

    - shell: ${{ inputs.shell }}
      run: |
        # Setup: unshallow checkout to last tag.
        kodev-ci-unshallow ${{ inputs.unshallow_depth }}

    - shell: ${{ inputs.shell }}
      run: |
        # Setup: basic jobs parameters.
        params=(
          # Required.
          NAME='${{ inputs.name }}'
          TARGET='${{ inputs.target }}'
          # Optional.
          CACHE_EXTRA_KEY='${{ inputs.cache_extra_key }}'
          TESTS='${{ inputs.tests }}'
          UPDATE_TARGET='${{ inputs.update_target }}'
          # Tools versions.
          7Z_VERSION='${{ inputs.sevenzip_version }}'
          CCACHE_VERSION='${{ inputs.ccache_version }}'
          MESON_VERSION='https://github.com/benoit-pierre/meson/releases/download/1.2.1-koreader/meson-1.2.1-py3-none-any.whl'
          NINJA_VERSION='ninja'
        )
        kodev-ci-add-job-parameters "${params[@]}"

    - shell: ${{ inputs.shell }}
      run: |
        # Setup: build options.
        cat >${{ format('meson/user_{0}-release.ini', inputs.target) }} <<\EOF
        [project options]
        b_thinlto_cache = false
        tests = ${{ inputs.tests != '' && 'true' || 'false' }}
        ${{ inputs.target_options }}
        EOF

    - shell: ${{ inputs.shell }}
      run: |
        # Setup: environment.
        decls=(
          CCACHE_DIR="${PWD}/.ccache"
          # Android.
          ANDROID_NDK_ROOT='/usr/local/lib/android/sdk/ndk/23.2.8568313'
          ANDROID_7Z_LZMA2='false'
          ANDROID_7Z_ZSTD='enabled'
        )
        setenv "${decls[@]}"

    - shell: ${{ inputs.shell }}
      run: |
        # Setup: cache key.
        kodev-ci-setup-cache-key

    # }}}

    # Restore build cache.
    - uses: actions/cache/restore@v3
      id: build-cache
      with:
        path: ${{ inputs.build_cache_paths }}
        key: ${{ inputs.cache_epoch }}＿build＿${{ env.CACHE_KEY_PREFIX }}＿${{ env.CACHE_KEY_HASH }}

    - shell: ${{ inputs.shell }}
      run: |
        # Update job's `building` parameter.
        kodev-ci-add-job-parameters BUILDING='${{ steps.build-cache.outputs.cache-hit != 'true' && 'true' || 'false' }}'

    # Install requirements. {{{

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - shell: ${{ inputs.shell }}
      run: |
        # Install requirements.
        kodev-ci-install-reqs ${{ inputs.extra_packages }}
        [[ "${JOB_BUILDING}" = 'true' ]] || exit 0
        ${{ inputs.extra_setup }}

    # }}}

    # Restore subprojects cache.
    - uses: actions/cache/restore@v3
      id: subprojects-cache
      with:
        path: ${{ inputs.subprojects_cache_paths }}
        key: ${{ inputs.cache_epoch }}＿subprojects＿${{ hashFiles('make/emulator.mk', 'make/ci.mk', 'subprojects/*.wrap', 'subprojects/packagefiles/**') }}

    - shell: ${{ inputs.shell }}
      if: steps.subprojects-cache.outputs.cache-hit != 'true'
      run: |
        # Fetch thirdparty.
        kodev-ci-fetch-thirdparty

    # Save subprojects cache.
    - uses: actions/cache/save@v3
      if: steps.subprojects-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ inputs.subprojects_cache_paths }}
        key: ${{ steps.subprojects-cache.outputs.cache-primary-key }}

    # Restore compilation cache. {{{

    # Restore compilation cache.
    - uses: actions/cache/restore@v3
      if: steps.build-cache.outputs.cache-hit != 'true'
      id: ccache-restore
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ inputs.cache_epoch }}＿ccache＿${{ env.CACHE_KEY_PREFIX }}＿

    - shell: ${{ inputs.shell }}
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: |
        # Compilation cache post-restore.
        kodev-ci-ccache-post-restore

    # }}}

    # - shell: ${{ inputs.shell }}
    #   if: steps.build-cache.outputs.cache-hit != 'true'
    #   run: |
    #     # Build.
    #     kodev-ci-build

    # # Save build cache.
    # - uses: actions/cache/save@v3
    #   if: steps.build-cache.outputs.cache-hit != 'true'
    #   with:
    #     path: ${{ inputs.build_cache_paths }}
    #     key: ${{ steps.build-cache.outputs.cache-primary-key }}

    # Save compilation cache. {{{

    - shell: ${{ inputs.shell }}
      if: always() && steps.ccache-restore.outcome == 'success'
      run: |
        # Compilation cache pre-save.
        kodev-ci-ccache-pre-save '${{ steps.ccache-restore.outputs.cache-primary-key }}'

    # Save compilation cache.
    - uses: actions/cache/save@v3
      if: always() && steps.ccache-restore.outcome == 'success'
      id: ccache-save
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ env.CCACHE_CACHE_KEY }}

    - shell: ${{ inputs.shell }}
      if: always() && steps.ccache-save.outcome == 'success'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Compilation cache post-save.
        kodev-ci-ccache-post-save '${{ github.repository }}' '${{ github.ref }}' '${{ steps.ccache-restore.outputs.cache-matched-key }}'

    # }}}

    # Test. {{{

    - shell: ${{ inputs.shell }}
      if: inputs.tests != ''
      run: |
        # Run tests.
        kodev-ci-test ${{ inputs.tests }}

    - shell: ${{ inputs.shell }}
      if: always() && inputs.tests != ''
      run: |
        # Show tests post-mortem.
        run cat koreader-*/koreader/.testrun/meson-logs/testlog.txt

    # Upload tests' coredump(s) if any.
    - uses: actions/upload-artifact@v3
      if: always() && env.UPLOAD_COREDUMPS
      with:
        name: Tests coredumps (${{ inputs.name }})
        path: coredumps.tar.zst

    # }}}

    # Release. {{{

    - shell: ${{ inputs.shell }}
      if: inputs.update_target != ''
      run: |
        # Create release.
        kodev-ci-release

    - shell: ${{ inputs.shell }}
      if: startsWith(inputs.update_target, 'android-')
      run: |
        # Sign android APKs
        kodev-ci-sign-apk ${{ inputs.uber_apk_signer_version }} *.apk

    # Upload release artifacts.
    - uses: actions/upload-artifact@v3
      if: inputs.update_target != '' && inputs.update_artifacts != ''
      with:
        name: KOReader ${{ inputs.name }}
        path: ${{ inputs.update_artifacts }}

    # }}}

# vim: foldmethod=marker ft=bash
