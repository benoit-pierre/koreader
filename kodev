#!/usr/bin/env bash

set -eo pipefail

# shellcheck disable=2034
declare -r ANSI_BLUE=$'\e[34;1m'
# shellcheck disable=2034
declare -r ANSI_DIM=$'\e[2m'
declare -r ANSI_GREEN=$'\e[32;1m'
declare -r ANSI_RED=$'\e[31;1m'
declare -r ANSI_RESET=$'\e[0m'
declare -r E_OPTERR=85

declare -r SHFMT_OPTIONS=(-i 4 -ci)

opt_dry_run=0
opt_timings=0

function info() {
    local color=ANSI_BLUE
    if [[ "$1" = -c* ]]; then
        color="ANSI_${1#-c}"
        shift
    fi
    if [[ -t 2 || "${CI}" = 'true' ]]; then
        echo "${!color}$*${ANSI_RESET}" 1>&2
    else
        echo "$*" 1>&2
    fi
}

function err() {
    info -cRED "$@"
}

function die() {
    local code=$?
    if [[ $# -ne 0 ]]; then
        code="$1"
        shift
    fi
    if [[ $# -ne 0 ]]; then
        err "$@"
    fi
    exit "${code}"
}

function print_quoted() {
    if [[ $# -ne 0 ]]; then
        printf '%q' "$1"
        shift
    fi
    if [[ $# -ne 0 ]]; then
        printf ' %q' "$@"
    fi
}

if [[ "${CI}" = 'true' ]]; then
    function faketty() {
        "$@"
    }
    if [[ ${OSTYPE} == darwin* ]] && which unbuffer &>/dev/null; then
        function faketty() {
            env TERM='xterm-256color' unbuffer "$@"
        }
    fi
    if [[ ${OSTYPE} == linux* ]] && which script &>/dev/null; then
        function faketty() {
            env TERM='xterm-256color' script /dev/null --quiet --return --command "$(print_quoted "$@")"
        }
    fi
fi

function run() {
    if [[ ${opt_dry_run} -eq 0 && "${CI}" = 'true' ]]; then
        echo -n '::group::' 1>&2
    fi
    info "$(print_quoted "$@")"
    if [[ ${opt_dry_run} -ne 0 ]]; then
        return
    fi
    local cmd=("$@")
    if [[ "${CI}" == 'true' ]]; then
        # For color outputâ€¦
        cmd=(faketty "${cmd[@]}")
    fi
    local code=0
    if [[ ${opt_timings} -ne 0 ]]; then
        time "${cmd[@]}" || code=$?
    else
        "${cmd[@]}" || code=$?
    fi
    if [ "${CI}" = 'true' ]; then
        info -cDIM "$(print_quoted "$@")"
        echo '::endgroup::' 1>&2
    fi
    return ${code}
}

function run_make() {
    local cmd=(make)
    if [[ ${opt_dry_run} -ne 0 ]]; then
        cmd+=(-n)
    fi
    if [[ "${CURDIR}" != "${PWD}" ]]; then
        cmd+=(-C "${CURDIR}")
    fi
    for param in TARGET KODEBUG VERBOSE; do
        cmd+=("${param}=${!param}")
    done
    cmd+=("$@")
    opt_dry_run=0 run "${cmd[@]}"
}

function setenv() {
    info "$(printf 'export %q\n' "$@")"
    # shellcheck disable=SC2163
    export "$@"
    if [[ "${CI}" == 'true' && -n "${GITHUB_ENV}" ]]; then
        printf '%q\n' "$@" >>"${GITHUB_ENV}"
    fi
}

function addpath() {
    info "export PATH=$(print_quoted "$1"):\"\$PATH\""
    export PATH="$1:${PATH}"
    if [[ "${CI}" == 'true' && -n "${GITHUB_PATH}" ]]; then
        printf '%s\n' "$1" >>"${GITHUB_PATH}"
    fi
}

function download() {
    run wget --continue --no-verbose --progress=dot:mega --show-progress "$@"
}

CURDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

function setup_target() {
    TARGET="$1"
    shift 1
    local valid=1
    case "${TARGET}" in
        # Emulator.
        '')
            if [[ "${CMD}" == 'release' ]]; then
                valid=0
            fi
            TARGET='emulator'
            ;;
        emulator*)
            if [[ "${CMD}" == 'release' ]]; then
                valid=0
            fi
            ;;
        appimage)
            if [[ "${CMD}" != 'release' ]]; then
                valid=0
            fi
            TARGET='emulator'
            ;;
        macos*)
            TARGET="emulator-${TARGET}"
            ;;
        # Devices.
        android-*) ;;
        kindlepw2) ;;
        kobo) ;;
        remarkable) ;;
        *)
            valid=0
            ;;
    esac
    if [[ "${valid}" -eq 0 ]]; then
        err "ERROR: unsupported ${CMD} target \"${TARGET}\"."
        echo "${HELP}"
        exit 1
    fi
    if [[ -z ${KODEBUG+x} && "${TARGET}" = emulator* && "${CMD}" != 'release' ]]; then
        # For the emulator, build a debug build by default.
        KODEBUG=1
    fi
}

function kodev-fetch-thirdparty() {
    run_make fetch-thirdparty
}

declare -r TARGETS_HELP_MSG="
TARGET:

    android-arm
    android-arm64
    android-x86
    android-x86_64
    kindlepw2       for Kindle models >= Paperwhite 2
    macos           macOS app bundle (:ou need a mac to build this package)
    remarkable
    emulator        default if no TARGET is given"

declare -r RELEASE_TARGETS_HELP_MSG="${TARGETS_HELP_MSG/emu*/""}appimage"

declare -r BUILD_GETOPT_SHORT='bdn'
declare -r BUILD_GETOPT_LONG='no-build,debug,no-debug,verbose'

function build_options_help_msg() {
    local section="$1"
    local no_build_details="$2"
    local debug_details="$3"
    local no_debug_details="$4"
    echo "
${section}${section:+ }OPTIONS:

    ${no_build_details:+-b, --no-build            do not build (}${no_build_details}${no_build_details:+)
    }-d, --debug               enable debugging symbols${debug_details:+ (}${debug_details}${debug_details:+)}
    -n, --no-debug            no debugging symbols${no_debug_details:+ (}${no_debug_details}${no_debug_details:+)}
    --verbose                 make the build system more verbose
"
}

function parse-options() {
    local short_opts="$1"
    local long_opts="$2"
    local args_spec="$3"
    shift 3
    if ! opt=$(getopt -o "h${short_opts}" --long "help,${long_opts}" --name "kodev" -- "$@"); then
        echo "${HELP}"
        exit ${E_OPTERR}
    fi
    # echo "opt: $opt"
    eval set -- "${opt}"
    OPTS=()
    ARGS=()
    while true; do
        case "$1" in
            -h | --help)
                echo "${HELP}"
                exit 0
                ;;
            -b | --no-build)
                NO_BUILD=1
                ;;
            -d | --debug)
                KODEBUG=1
                ;;
            -n | --no-debug)
                KODEBUG=
                ;;
            --verbose)
                # shellcheck disable=SC2034
                VERBOSE=1
                ;;
            --)
                shift
                break
                ;;
            *)
                OPTS+=("$1")
                ;;
        esac
        shift
    done
    local expected
    local valid=0
    case "${args_spec}" in
        '*') ;;
        '+')
            expected='1 or more'
            [[ $# -ge 1 ]] || valid=1
            ;;
        '?')
            expected='1 optional'
            [[ $# -le 1 ]] || valid=1
            ;;
        *)
            expected="${args_spec}"
            [[ $# -eq "${args_spec}" ]] || valid=1
            ;;
    esac
    if [[ ${valid} -ne 0 ]]; then
        err "ERROR: invalid ${CMD} arguments; ${expected} expected but $# received"
        echo "${HELP}"
        exit 8
    fi
    ARGS=("$@")
    # echo "OPTS: ${OPTS[@]} [${#OPTS[@]}]"
    # echo "ARGS: ${ARGS[@]} [${#ARGS[@]}]"
}

function kodev-build() {
    CMD='build'
    HELP="
usage: build <OPTIONS> <TARGET>
$(build_options_help_msg '' 'stop after the setup phase' 'default for emulator' 'default for target devices')
${TARGETS_HELP_MSG}
"
    parse-options \
        "h${BUILD_GETOPT_SHORT}" \
        "help,${BUILD_GETOPT_LONG}" \
        '?' "$@"
    setup_target "${ARGS[0]}" 'build'
    run_make ${NO_BUILD:+setup}
}

function kodev-clean() {
    CMD='clean'
    HELP="
usage: clean <TARGET>
$(build_options_help_msg '' '' 'clean debug build' 'clean release build')
${TARGETS_HELP_MSG}
"
    parse-options \
        "h${BUILD_GETOPT_SHORT/b/}" \
        "help,${BUILD_GETOPT_LONG/no-build,/}" \
        '?' "$@"
    setup_target "${ARGS[0]}" 'clean'
    run_make clean
}

function kodev-release() {
    CMD='release'
    HELP="
usage: release <OPTIONS> <TARGET>

OPTIONS:

    -i, --ignore-translation  do not fetch translation for release

$(build_options_help_msg 'BUILD' 'create update from existing build' '' 'default')

${RELEASE_TARGETS_HELP_MSG}
"
    parse-options \
        "ih${BUILD_GETOPT_SHORT}" \
        "ignore-translation,help,${BUILD_GETOPT_LONG}" \
        '1' "$@"

    local ignore_translation=0
    for opt in "${OPTS[@]}"; do
        case "${opt}" in
            -i | --ignore-translation)
                ignore_translation=1
                ;;
        esac
    done

    local update='update'
    if [[ "${ARGS[0]}" == 'appimage' ]]; then
        update='appimageupdate'
    fi

    setup_target "${ARGS[0]}"

    if [ "${ignore_translation}" -eq 0 ]; then
        run_make po || {
            echo "ERROR: failed to fetch translation."
            echo "Tip: Use --ignore-translation OPTION if you want to build a release without translation."
            exit 1
        }
    fi

    run_make ${NO_BUILD:+--assume-old=all} "${update}"
}

function kodev-wbuilder() {
    CMD='wbuilder'
    HELP="
usage: wbuilder
    "
    parse-options '' '' 0 "$@"
    setup_target 'emulator'
    echo "[*] Running wbuilder.lua..."
    run_make RPREFIX='EMULATE_READER_W=540 EMULATE_READER_H=720' run-wbuilder
}

function kodev-run() {
    VALGRIND=(valgrind --tool=memcheck --trace-children=yes --leak-check=full --track-origins=yes --show-reachable=yes)
    CALLGRIND=(valgrind --tool=callgrind --trace-children=yes)
    # NOTE: Speaking of Valgrind, if your libdrm/mesa isn't built w/ valgrind markings, there's a Valgrind suppression file for AMD cards in the tools folder.
    #       Just append --suppressions=${PWD/tools/valgrind_amd.supp to your valgrind command.
    CMD='run'
    HELP="
usage: run <OPTIONS> <EMULATOR ARGS>
       run <OPTIONS> <ANDROID TARGET> [ANDROID APK]
$(build_options_help_msg '' 'use existing build' 'default for emulator' 'default for android target')

EMULATOR OPTIONS:

    -H X, --screen-height=X  set height of the emulator screen (default: 720)
    -W X, --screen-width=X   set width of the emulator screen (default: 540)
    -D X, --screen-dpi=X     set DPI of the emulator screen (default: 160)
    -t, --disable-touch      use this if you want to simulate keyboard only devices
    -s FOO --simulate=FOO    simulate dimension and other specs of the given device:
                             hidpi, kindle, kindle-paperwhite, kobo-aura-one, kobo-clara,
                             kobo-forma, kobo-h2o or legacy-paperwhite.
    -g X, --gdb=X            run with debugger (default: nemiver)
    -c, --callgrind          run with valgrind's callgrind (\`$(print_quoted "${CALLGRIND[@]}")\`)
    -v X, --valgrind=X       run with valgrind (default: \`$(print_quoted "${VALGRIND[@]}")\`)

    Extra arguments are forwarded to the emulator.

ANDROID TARGET:

    Install and run KOReader on an Android device connected through ADB.

    Supported targets: android-arm, android-arm64, android-x86 and android-x86_64.
"
    parse-options \
        "tg::v::cW:H:D:s:${BUILD_GETOPT_SHORT}" \
        "disable-touch,gdb::,valgrind::,callgrind,screen-width:,screen-height:,screen-dpi:,simulate:,${BUILD_GETOPT_LONG}" \
        '*' "$@"

    # Defaults
    screen_width=540
    screen_height=720

    set -- "${OPTS[@]}"

    while [[ $# -gt 0 ]]; do
        PARAM="${1}"
        # Support using an = assignment with short options (e.g., -f=blah instead of -f blah).
        VALUE="${2/#=/}"
        case "${PARAM}" in
            -t | --disable-touch)
                export DISABLE_TOUCH=1
                ;;
            -g | --gdb)
                if [ -n "${VALUE}" ]; then
                    read -r -a gdb <<<"${VALUE}"
                else
                    # Try to use friendly defaults for gdb
                    if command -v nemiver >/dev/null; then
                        # Nemiver is a nice GUI
                        gdb=(nemiver)
                    elif command -v ddd >/dev/null; then
                        # DDD is a slightly less nice GUI
                        gdb=(ddd)
                    elif command -v cgdb >/dev/null; then
                        # cgdb is a nice curses-based gdb front
                        gdb=(cgdb)
                    elif command -v gdb >/dev/null; then
                        # gdb -tui is a slightly less nice terminal user interface
                        gdb=(gdb -tui)
                    else
                        echo "Couldn't find gdb."
                        exit 1
                    fi
                fi
                shift
                ;;
            -v | --valgrind)
                if [ -n "${VALUE}" ]; then
                    read -r -a valgrind <<<"${VALUE}"
                else
                    # Try to use sensible defaults for valgrind
                    if command -v valgrind >/dev/null; then
                        valgrind=("${VALGRIND[@]}")
                    else
                        echo "Couldn't find valgrind."
                        exit 1
                    fi
                fi
                shift
                ;;
            -c | --callgrind)
                # Try to use sensible defaults for valgrind
                if command -v valgrind >/dev/null; then
                    valgrind=("${CALLGRIND[@]}")
                else
                    echo "Couldn't find valgrind."
                    exit 1
                fi
                ;;
            -W | --screen-width)
                screen_width=${VALUE}
                shift
                ;;
            -H | --screen-height)
                screen_height=${VALUE}
                shift
                ;;
            -D | --screen-dpi)
                screen_dpi=${VALUE}
                shift
                ;;
            -s | --simulate)
                device_model="${VALUE}"
                case "${device_model}" in
                    kindle)
                        screen_width=600
                        screen_height=800
                        screen_dpi=167
                        ;;
                    legacy-paperwhite)
                        screen_width=758
                        screen_height=1024
                        screen_dpi=212
                        ;;
                    kobo-forma)
                        screen_width=1440
                        screen_height=1920
                        screen_dpi=300
                        ;;
                    kobo-aura-one)
                        screen_width=1404
                        screen_height=1872
                        screen_dpi=300
                        ;;
                    kobo-clara | kindle-paperwhite)
                        screen_width=1072
                        screen_height=1448
                        screen_dpi=300
                        ;;
                    kobo-h2o)
                        screen_width=1080
                        screen_height=1429
                        screen_dpi=265
                        ;;
                    hidpi)
                        screen_width=1500
                        screen_height=2000
                        screen_dpi=600
                        ;;
                    *)
                        echo "ERROR: spec unknown for ${device_model}."
                        ;;
                esac
                shift
                ;;
        esac
        shift
    done

    set -- "${ARGS[@]}"

    local target=''
    case "$1" in
        android*)
            target="$1"
            shift
            ;;
    esac

    setup_target "${target}" 'run' "${RUN_HELP_MSG}"

    local rprefix=()

    if [[ -z "${target}" ]]; then
        rprefix+=(EMULATE_READER_W="${screen_width}" EMULATE_READER_H="${screen_height}" EMULATE_READER_DPI="${screen_dpi}")
    fi

    if [[ "${#valgrind}" -gt 0 ]]; then
        rprefix+=("${valgrind[@]}")
    fi

    if [[ "${#gdb}" -gt 0 ]]; then
        # We don't want to stack valgrind on top of GDB ;).
        if [[ "${gdb[0]}" == gdb* ]]; then
            # The standard CLI needs a little hand holding to properly pass arguments to the process it'll monitor
            rprefix+=("${gdb[@]}" --args)
        else
            rprefix+=("${gdb[@]}")
        fi
    fi

    local margs=()

    if [[ "${target}" = android-* ]]; then
        if [[ "$1" = *.apk ]]; then
            margs+=(ANDROID_APK="$1")
            NO_BUILD=1
            shift
        fi
        if [[ ${#rprefix[@]} -gt 0 || $# -gt 0 ]]; then
            echo "${RUN_HELP_MSG}"
            exit ${E_OPTERR}
        fi
    fi

    local rargs=()

    for a in "$@"; do
        if [[ "${a}" != [-/]* ]]; then
            a="${PWD}/${a}"
        fi
        rargs+=("${a}")
    done

    if [[ ${#rprefix[@]} -gt 0 ]]; then
        margs+=(RPREFIX="$(print_quoted "${rprefix[@]}")")
    fi

    if [[ ${#rargs} -gt 0 ]]; then
        margs+=(RARGS="$(print_quoted "${rargs[@]}")")
    fi

    run_make "${margs[@]}" ${NO_BUILD:+--assume-old=all --assume-old=update} run
}

function kodev-test() {
    CMD='test'
    HELP="
usage: test <OPTIONS> [all|base|bench|front] <TEST_NAME>

    TEST_NAME is optional. If no TEST_NAME is given, all tests will be run.

OPTIONS:

    -t, --tags=TAGS           only run tests with given tags
$(build_options_help_msg 'BUILD' 'use existing build' '' 'default')
"
    parse-options \
        "t:s${BUILD_GETOPT_SHORT}" \
        "tags:,${BUILD_GETOPT_LONG}" \
        '*' "$@"

    local targs=()

    set -- "${OPTS[@]}"

    while [[ $# -gt 0 ]]; do
        PARAM="${1}"
        # Support using an = assignment with short options (e.g., -f=blah instead of -f blah).
        VALUE="${2/#/}"
        case "${PARAM}" in
            -t | --tags)
                targs+=(--tags="${VALUE}")
                shift
                ;;
        esac
        shift
    done

    setup_target 'emulator'

    local margs=()

    set -- "${ARGS[@]}"

    case "$1" in
        '')
            margs+=('test-all')
            ;;
        all | base | bench | front)
            margs+=("test-$1")
            shift
            ;;
        *)
            err "ERROR: unsupported ${CMD} suite \"${1}\"."
            echo "${HELP}"
            exit 1
            ;;
    esac
    targs+=("$@")

    if [[ ${#targs[@]} -gt 0 ]]; then
        margs+=(TARGS="$(print_quoted "${targs[@]}")")
    fi

    run_make ${NO_BUILD:+--assume-old=all} "${margs[@]}"
}

function check-shell() {
    local output
    local -a issues=()
    local warn="${ANSI_RED}Warning${ANSI_RESET}"
    local shellcheck=(shellcheck --color=always)
    local shfmt=(env FORCE_COLOR=1 shfmt "${SHFMT_OPTIONS[@]}")
    printf '%s: ' "$1"
    # Checking code quality.
    if ! output="$("${shellcheck[@]}" "$1")"; then
        issues+=("${output}")
    fi
    # Checking formatting.
    if ! output="$("${shfmt[@]}" -kp -d "$1")"; then
        issues+=($'\n'"${warn}: $1 does not abide by coding style, diff for expected style:")
        issues+=("${output}")
    fi
    if [[ ${#issues[@]} -eq 0 ]]; then
        echo "${ANSI_GREEN}OK${ANSI_RESET}"
        return 0
    else
        echo "${ANSI_RED}KO${ANSI_RESET}"
        printf '%s\n' "${issues[@]}"
        return 1
    fi
}

function check-lua() {
    local output
    local -a issues=()
    local warn="${ANSI_RED}Warning${ANSI_RESET}"
    printf '%s: ' "$1"
    # Checking for unscaled sizes.
    output=''
    case "$1" in
        base/*) ;;
        frontend/ui/data/keyboardlayouts/*) ;;
        frontend/ui/data/koptoptions.lua) ;;
        *)
            output="$(grep --color=always -n '\(padding\|margin\|bordersize\|width\|height\|radius\|linesize\) = [0-9]\{1,2\}' "$1" |
                      grep -v '= 0' | grep -v '= [0-9]/[0-9]' | grep -Ev '(default_option_height|default_option_padding)' |
                      grep -v scaleBySize | grep -v 'unscaled_size_check: ignore' || true)"
            ;;
    esac
    # Also check for Geom objects.
    case "$1" in
        base/*) ;;
        spec/unit/gesturerange_spec.lua) ;;
        *)
            [[ -z "${output}" ]] || output+=$'\n\n'
            output+="$(grep --color=always -En 'Geom:new{.+ [wh] = [0-9]{1,4}' "$1" |
                      grep -Ev '[wh] = 0' | grep -v '= [0-9]/[0-9]' |
                      grep -v scaleBySize || true)"
            ;;
    esac
    if [[ -n "${output}" ]]; then
        issues+=(
            ''
            "${warn}: it looks like you might be using unscaled sizes. It is almost"
            "always preferable to defer to one of the predefined sizes in ui.size:"
            ''
            "${output}"
            ''
        )
    fi
    # Checking for tabs.
    output=''
    case "$1" in
        plugins/newsdownloader.koplugin/lib/dateparser.lua) ;;
        plugins/newsdownloader.koplugin/lib/xml.lua) ;;
        *)
            output="$(env GREP_COLORS='ms=41' grep --color=always -nP '\t+' "$1" || true)"
            ;;
    esac
    if [[ -n "${output}" ]]; then
        issues+=(
            ''
            "${warn}: tab character detected. Please use spaces:"
            ''
            "${output}"
            ''
        )
    fi
    # Check for untagged FIXMEs / TODOs / warnings.
    output=''
    case "$1" in
        plugins/newsdownloader.koplugin/lib/dateparser.lua) ;;
        plugins/newsdownloader.koplugin/lib/xml.lua) ;;
        *)
            output="$(grep --color=always -Pin '[^\-]--(\s+)?@?(todo|fixme|warning)' "$1" || true)"
            ;;
    esac
    if [[ -n "${output}" ]]; then
        issues+=(
            ''
            "${warn}: possible improperly tagged todo, fixme or warning"
            'detected, use --- followed by @todo, @fixme or @warning:'
            ''
            "${output}"
            ''
        )
    fi
    case "$1" in
        base/libkoreader.meson.lua) ;;
        *)
            if ! output="$(luacheck --codes --quiet "$1")"; then
                issues+=($'\n'"${output}"$'\n')
            fi
            ;;
    esac
    if [[ ${#issues[@]} -eq 0 ]]; then
        echo "${ANSI_GREEN}OK${ANSI_RESET}"
        return 0
    else
        echo "${ANSI_RED}KO${ANSI_RESET}"
        printf '%s\n' "${issues[@]}"
        return 1
    fi
}

function list-files() {
    local -a files
    local glob="$1"
    local shebang="$2"
    shift 2
    for repo in "$@"; do
        mapfile -t files < <(
            git -C "${repo}" -c submodule.recurse=0 grep -lE "${shebang}" || true
            git -C "${repo}" ls-files "${glob}"
        )
        if [[ "${repo}" != '.' ]]; then
            files=("${files[@]/#/${repo}/}")
        fi
        printf '%s\n' "${files[@]}"
    done
}

function kodev-check() {
    local SHELL_GLOB='*.sh'
    local SHELL_SHEBANG='^#!(/usr)?/bin/(env )?(bash|sh)'
    local LUA_GLOB='*.lua'
    local LUA_SHEBANG='^#!(/usr)?/bin/(env )?lua(jit)?'
    local -a shellscripts
    local -a luafiles
    local parallel=0
    local exit_code=0

    if [[ -z "${PARALLEL_SEQ}" ]] && which parallel >/dev/null 2>&1; then
        parallel=1
    fi

    if [[ $# -eq 0 ]]; then
        # kodev-fetch-thirdparty
        local -a repos=(
            .
            subprojects/koreader-runtests
            subprojects/luajit-launcher
        )
        mapfile -t shellscripts < <(
            list-files "${SHELL_GLOB}" "${SHELL_SHEBANG}" "${repos[@]}" |
                grep -vE '^(plugins/terminal\.koplugin/shfm|subprojects/crengine/.*|subprojects/luajit-launcher/gradlew)$' | sort -u
        )
        mapfile -t luafiles < <(
            list-files "${LUA_GLOB}" "${LUA_SHEBANG}" "${repos[@]}" |
                grep -vE '^base/ffi/.*_h\.lua$' | sort -u
        )
    else
        for arg in "$@"; do
            # shellcheck disable=2254
            case "${arg}" in
                ${LUA_GLOB})
                    luafiles+=("${arg}")
                    ;;
                ${SHELL_GLOB})
                    shellscripts+=("${arg}")
                    ;;
                *)
                    if grep -qE "${LUA_SHEBANG}" "${arg}"; then
                        luafiles+=("${arg}")
                    elif grep -qE "${SHELL_SHEBANG}" "${arg}"; then
                        shellscripts+=("${arg}")
                    else
                        die 1 "unsupported file type: \"${arg}\""
                    fi
                    ;;
            esac
        done
    fi

    if [[ ${#shellscripts[@]} -gt 0 && ${parallel} -eq 1 ]]; then
        parallel --keep-order --line-buffer ./kodev check ::: "${shellscripts[@]}" || exit_code=1
    else
        for f in "${shellscripts[@]}"; do
            check-shell "${f}" || exit_code=1
        done
    fi

    if [[ ${#luafiles[@]} -gt 0 && ${parallel} -eq 1 ]]; then
        parallel --keep-order --line-buffer ./kodev check ::: "${luafiles[@]}" || exit_code=1
    else
        for f in "${luafiles[@]}"; do
            check-lua "${f}" || exit_code=1
        done
    fi

    exit "${exit_code}"
}

function kodev-cov() {
    CMD='cov'
    HELP="
usage: cov <OPTIONS>

OPTIONS:

    -f, --full                show full coverage report (down to each line)
    -s, --show-previous       show coverage stats from previous run
$(build_options_help_msg 'BUILD' 'use existing build' '' 'default')
"
    parse-options \
        "fs${BUILD_GETOPT_SHORT}" \
        "full,show-previous,${BUILD_GETOPT_LONG}" \
        '*' "$@"

    # Defaults
    local show_full=
    local show_previous=

    set -- "${OPTS[@]}"

    while [[ $# -gt 0 ]]; do
        PARAM="${1}"
        # Support using an = assignment with short options (e.g., -f=blah instead of -f blah).
        VALUE="${2/#/}"
        case "${PARAM}" in
            -f | --full)
                show_full=1
                ;;
            -s | --show-previous)
                show_previous=1
                ;;
        esac
        shift
    done

    setup_target 'emulator'

    local margs=(
        ${NO_BUILD:+--assume-old=all}
        ${show_previous:+--assume-old=testcov-front}
        cov${show_full:+-full}
    )

    if [[ ${#ARGS[@]} -gt 0 ]]; then
        margs+=(TARGS="$(print_quoted "${ARGS[@]}")")
    fi

    run_make "${margs[@]}"
}

function kodev-log() {
    LOG_HELP_MSG="
usage: log <OPTIONS> <TARGET>

OPTIONS:

    -d, --debug               more verbose logs (e.g., debug builds)

TARGET:

    android
"
    [ $# -lt 1 ] && {
        echo "${LOG_HELP_MSG}"
        exit 1
    }

    # Defaults
    ignore_translation=0

    declare opt
    declare -r short_opts="dh"
    declare -r long_opts="debug, help"

    if ! opt=$(getopt -o "${short_opts}" --long "${long_opts}" --name "kodev" -- "${@}"); then
        echo "${LOG_HELP_MSG}"
        exit ${E_OPTERR}
    fi

    eval set -- "${opt}"

    while true; do
        PARAM="${1}"
        # Support using an = assignment with short options (e.g., -f=blah instead of -f blah).
        VALUE="${2/#=/}"
        case "${PARAM}" in
            -d | --debug)
                export KODEBUG=1
                ;;
            -h | --help)
                echo "${LOG_HELP_MSG}"
                exit 0
                ;;
            --)
                break
                ;;
            *)
                echo "ERROR: unknown option \"${PARAM}\""
                echo "${RELEASE_HELP_MSG}"
                exit 1
                ;;
        esac
        shift
    done
    shift

    case "${1}" in
        android)
            if command -v pidcat >/dev/null; then
                if [ -n "${KODEBUG}" ]; then
                    pidcat "org.koreader.launcher"
                else
                    pidcat org.koreader.launcher --min-level=I
                fi
            else
                if [ -n "${KODEBUG}" ]; then
                    adb logcat 'KOReader:V ApkUpdater:V Assets:V Device:V dlopen:V EPD:V EventReceiver:V Lights:V Surface:V LuaJIT:V MainActivity:V NativeGlue:V NativeThread:V Timeout:V ActivityManager:V AndroidRuntime:V DEBUG:* *:F'
                else
                    adb logcat 'KOReader:I MainActivity:V NativeGlue:V NativeThread:V ActivityManager:W AndroidRuntime:E DEBUG:* *:F'
                fi
            fi
            ;;
        *)
            err "ERROR: unsupported target '$1'."
            echo "${LOG_HELP_MSG}"
            exit 1
            ;;
    esac
}

function kodev-ci-add-job-parameters() {
    local decls
    decls="$(printf 'readonly %q\n' "${@/#/JOB_}")"
    info "${decls}"
    echo "${decls}" >>job.sh
}

function kodev-ci-func-banner() {
    info -cGREEN "${FUNCNAME[1]}"
}

function kodev-ci-unshallow() {
    kodev-ci-func-banner
    while ! git describe --tags; do
        git fetch --deepen "${1:-100}" --no-recurse-submodules
    done
}

function kodev-ci-fetch-thirdparty() {
    kodev-ci-func-banner
    run_make fetch-thirdparty
    run_make trim-thirdparty
}

function kodev-ci-install-7z() {
    kodev-ci-func-banner
    local dist="linux-p7zip.7z"
    download "https://github.com/p7zip-project/p7zip/releases/download/v${JOB_7Z_VERSION}/${dist}"
    run 7z -o7z x "${PWD}/${dist}"
    run rm "${dist}"
    addpath "${PWD}/7z"
}

function kodev-ci-install-x-tools() {
    kodev-ci-func-banner
    download "https://github.com/koreader/koxtoolchain/releases/download/2021.12/$1.zip"
    run 7z e "$1.zip"
    run tar xvaf "$1.tar.gz" -C ..
    addpath "${PWD%/*}/x-tools/$2/bin"
}

function kodev-ci-install-reqs-linux() {
    kodev-ci-func-banner
    local need_7z=0
    local packages=("$@")
    local xtools=()
    case "${JOB_TARGET}" in
        android-arm)
            packages+=(
                gcc-multilib
            )
            need_7z=1
            ;;
        android-arm64)
            need_7z=1
            ;;
        android-x86)
            packages+=(
                gcc-multilib
                nasm
            )
            need_7z=1
            ;;
        emulator*)
            packages+=(
                libbsd0
                libegl1-mesa-dev
                libgl1-mesa-dev
                libgles2-mesa-dev
                libvulkan-dev
                libwayland-dev
                libx11-dev
                libxcursor-dev
                libxi-dev
                libxkbcommon-dev
                libxrandr-dev
                nasm
                wayland-protocols
            )
            ;;
        kindlepw2)
            packages+=(
                gcc-multilib
                pigz
            )
            xtools=(kindlepw2 arm-kindlepw2-linux-gnueabi)
            ;;
        kobo)
            packages+=(
                gcc-multilib
                pigz
            )
            xtools=(kobo arm-kobo-linux-gnueabihf)
            ;;
        remarkable)
            packages+=(
                gcc-multilib
            )
            xtools=(remarkable arm-remarkable-linux-gnueabihf)
            ;;
    esac
    if [[ "${JOB_BUILDING}" == 'true' ]]; then
       if [[ ${#packages} -gt 0 ]]; then
           run sudo rm -f /var/lib/man-db/auto-update
           run sudo apt -q update
           run sudo apt -qy install --no-install-recommends "${packages[@]}"
       fi
       if [[ ${#xtools} -gt 0 ]]; then
           kodev-ci-install-x-tools "${xtools[@]}"
       fi
    fi
    if [[ ${need_7z} -eq 1 && -n "${JOB_7Z_VERSION}" ]]; then
        kodev-ci-install-7z
    fi
}

function kodev-ci-install-reqs-macos() {
    kodev-ci-func-banner
    local packages=(
        expect
        gnu-getopt
    )
    if [[ "${JOB_BUILDING}" == 'true' ]]; then
        packages+=(
            nasm
            "$@"
        )
    fi
    run env HOMEBREW_NO_INSTALL_CLEANUP=1 brew install -q "${packages[@]}"
    addpath "$(brew --prefix)/opt/gnu-getopt/bin"
    case "${JOB_TARGET}" in
        emulator-macos-arm64)
            deployment_target='11.0'
            ;;
        *)
            deployment_target='10.15'
            ;;
    esac
    setenv MACOSX_DEPLOYMENT_TARGET="${deployment_target}"
}

function kodev-ci-install-reqs() {
    kodev-ci-func-banner
    run python -m pip --disable-pip-version-check install "${JOB_MESON_VERSION}" "${JOB_NINJA_VERSION}"
    case "${RUNNER_OS}" in
        'Linux')
            kodev-ci-install-reqs-linux "$@"
            ;;
        'macOS')
            kodev-ci-install-reqs-macos "$@"
            ;;
    esac
    if [[ "${JOB_BUILDING}" != 'true' ]]; then
        return
    fi
    kodev-ci-install-ccache
}

function kodev-ci-install-ccache() {
    kodev-ci-func-banner
    local dist_flavor
    local dist_ext
    local tar
    case "${RUNNER_OS}" in
        'Linux')
            dist_flavor='linux-x86_64'
            dist_ext='tar.xz'
            tar='tar'
            ;;
        'macOS')
            dist_flavor='darwin'
            dist_ext='tar.gz'
            tar='gtar'
            ;;
        *)
            die 1 "unsupported runner OS: \"${RUNNER_OS}\""
            ;;
    esac
    local dist="ccache-${JOB_CCACHE_VERSION}-${dist_flavor}"
    download "https://github.com/ccache/ccache/releases/download/v${JOB_CCACHE_VERSION}/${dist}.${dist_ext}"
    run "${tar}" xvaf "${dist}.${dist_ext}" -C ..
    run rm "${dist}.${dist_ext}"
    addpath "${PWD%/*}/${dist}"
}

function kodev-ci-ccache-post-restore() {
    kodev-ci-func-banner
    run ccache --show-stats --verbose
    run ccache --zero-stats
    run ccache --show-config
}

function kodev-ci-ccache-pre-save() {
    kodev-ci-func-banner
    local primary_key="$1"
    run ccache --show-stats --verbose
    run ccache --max-size=256M
    run ccache --cleanup >/dev/null
    run ccache --show-stats --verbose
    setenv CCACHE_CACHE_KEY="${primary_key}ï¼¿$(date '+%s')"
}

function kodev-ci-ccache-post-save() {
    kodev-ci-func-banner
    local repo="$1"
    local cache_key="$2"
    run gh cache delete --repo "${repo}" "${cache_key}" || true
}

function kodev-ci-setup-cache-key() {
    kodev-ci-func-banner
    run_make CCACHE=ccache TARGET="${JOB_TARGET}" cache-key
    run cat cache_key.txt
    setenv CACHE_KEY_HASH="$(git hash-object cache_key.txt)"
    setenv CACHE_KEY_PREFIX="${JOB_TARGET}${JOB_TESTS:+ï¼¿tests}${JOB_CACHE_EXTRA_KEY:+ï¼¿}${JOB_CACHE_EXTRA_KEY}"
}

function kodev-ci-build() {
    kodev-ci-func-banner
    kodev-build --verbose -n "${JOB_TARGET}"
}

function kodev-ci-coredumps-handle-linux() {
    kodev-ci-func-banner
    local topdir="${PWD#/}"
    local script="${CORESDIR}/autopsy.sh"
    local libdir="${CORESDIR}/lib/x86_64-linux-gnu"
    local kodir
    kodir="${topdir}/$(echo -n koreader-*/koreader)"
    run cd "${CORESDIR}"
    run mkdir -p "${CORESDIR}/${kodir%/*}"
    run mv "/${kodir}" "${CORESDIR}/${kodir}"
    run mkdir -p "${libdir}" "${CORESDIR}/usr"
    run ln -s ../lib "${CORESDIR}/usr"
    run cp -a /"${libdir#*/}"/{ld-*,libcrypto,libgcc_s,libssl,libstdc++}.so* "${libdir}"
    run cp -a /"${libdir#*/}"/{libc,libdl,libm,libnss_dns,libnss_files,libpthread,libresolv,librt,libthread_db}{-*,}.so* "${libdir}"
    # shellcheck disable=2016
    find "${libdir}" -type l -printf 'l="%p" t="%l"; ln -vsnf "${t##*/}" "$l"\n' | bash -x
    cat >"${script}" <<EOF
#!/bin/sh
kodir='${kodir}'
export DEBUGINFOD_URLS="https://debuginfod.ubuntu.com"
sosp="\$(find "\$kodir" -type f -name '*.so' -printf '%h\\n' | sort -u | xargs printf '%s:')"
exec gdb \
    -ex "set solib-absolute-prefix \$PWD" \\
    -ex "set solib-search-path \${sosp%:}" \\
    "\$kodir/luajit" \\
    corefile-luajit-*
EOF
    run chmod +x "${script}"
    run tar --zstd -cvf "coredumps.tar.zst" "${CORESDIR}"
    setenv UPLOAD_COREDUMPS=1
}

function kodev-ci-coredumps-handle-macos() {
    kodev-ci-func-banner
    for coredump in "${CORESDIR}"/core.*; do
        run lldb --batch --core "${coredump}" --one-line bt
    done
}

function kodev-ci-coredumps-handle() {
    kodev-ci-func-banner
    [[ -d "${CORESDIR}" ]] || return
    [[ "$(find "${CORESDIR}" -maxdepth 0 -empty)" ]] && return
    err 'we have coredumps!'
    ls -lh "${CORESDIR}"
    case "${RUNNER_OS}" in
        'Linux')
            kodev-ci-coredumps-handle-linux
            ;;
        'macOS')
            kodev-ci-coredumps-handle-macos
            ;;
    esac
}

function kodev-ci-test() {
    kodev-ci-func-banner
    case "${RUNNER_OS}" in
        'Linux')
            setenv CORESDIR="${PWD}/coredumps"
            echo "${CORESDIR}/corefile-%e-%p-%t" | sudo tee /proc/sys/kernel/core_pattern
            mkdir -p "${CORESDIR}"
            ;;
        'macOS')
            setenv CORESDIR='/cores'
            sudo chmod 1777 "${CORESDIR}"
            ;;
    esac
    ulimit -c unlimited
    trap kodev-ci-coredumps-handle EXIT
    kodev-test --verbose -n -b "$@"
}

function kodev-ci-release() {
    kodev-ci-func-banner
    kodev-release --verbose -n -b "${JOB_UPDATE_TARGET}"
}

function kodev-ci-sign-apk() {
    kodev-ci-func-banner
    local uber_ver="$1"
    local uber_jar="uber-apk-signer-${uber_ver}.jar"
    shift
    download "https://github.com/patrickfav/uber-apk-signer/releases/download/v${uber_ver}/${uber_jar}"
    run java -jar "${uber_jar}" --apks "$@"
}

function kodev-ci-shell() {
    if [[ -r ./job.sh ]]; then
        # shellcheck disable=SC1091
        . ./job.sh
    fi
    "$@"
}

function kodev-ci() {
    local fn="kodev-ci-$1"
    [[ "$(type -t "${fn}")" = function ]] || die 1 "invalid ci command: $1"
    shift
    "${fn}" "$@"
}

HELP_MSG="
usage: $0 COMMAND <ARGS>

Supported commands:

    activate            Bootstrap shell environment for kodev
    build               Build KOReader
    clean               Clean KOReader build
    fetch-thirdparty    Fetch thirdparty dependencies for build
    log                 Tail log stream for a running KOReader app
    release             Build KOReader release package
    run                 Run KOReader
    test                Run busted tests
    check               Run luacheck static-analysis
    cov                 Run busted tests for coverage
    wbuilder            Run wbuilder.lua script (useful for building new UI widget)
    prompt              Run a LuaJIT shell within KOReader's environment
"
[ $# -lt 1 ] && {
    echo "Missing command."
    echo "${HELP_MSG}"
    exit 1
}

if [[ "$1" = 'ci' && "${CI}" = 'true' ]]; then
    exec 2>&1 # avoid jumbled outputâ€¦
    opt_timings=1
    shift 1
    kodev-ci "$@"
    exit
fi

case "${1}" in
    activate)
        echo "adding ${CURDIR} to \$PATH..."
        export PATH="${PATH}:${CURDIR}"
        eval "$(luarocks --lua-version 5.1 path --bin)"
        exec "${SHELL}"
        ;;
    fetch-thirdparty)
        kodev-fetch-thirdparty
        ;;
    clean)
        shift 1
        kodev-clean "$@"
        ;;
    build)
        shift 1
        kodev-build "$@"
        ;;
    release)
        shift 1
        kodev-release "$@"
        ;;
    wbuilder)
        shift 1
        kodev-wbuilder "$@"
        ;;
    run)
        shift 1
        kodev-run "$@"
        ;;
    test)
        shift 1
        kodev-test "$@"
        ;;
    check)
        shift 1
        kodev-check "$@"
        ;;
    cov)
        shift 1
        kodev-cov "$@"
        ;;
    prompt)
        kodev-build
        pushd "${EMU_DIR}" && {
            ./luajit -i setupkoenv.lua
        } && popd || exit
        ;;
    log)
        shift 1
        kodev-log "$@"
        ;;
    -h | --help)
        echo "${HELP_MSG}"
        exit 0
        ;;
    *)
        echo "Unknown command: $1."
        echo "${HELP_MSG}"
        exit 8
        ;;
esac

# vim: shiftwidth=4 softtabstop=4
