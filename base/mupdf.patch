diff --git a/source/pdf/pdf-font.c b/source/pdf/pdf-font.c
index c6dc712..82385a4 100644
--- a/source/pdf/pdf-font.c
+++ b/source/pdf/pdf-font.c
@@ -188,7 +188,12 @@ pdf_load_builtin_font(fz_context *ctx, pdf_font_desc *fontdesc, char *fontname,
 		if (!data)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find builtin font: '%s'", fontname);
 
+#ifndef NOBUILTINFONT
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, 0, 1);
+#else
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, data, 0, 1);
+		free(data);
+#endif
 	}
 
 	if (!strcmp(clean_name, "Symbol") || !strcmp(clean_name, "ZapfDingbats"))
@@ -212,7 +217,12 @@ pdf_load_substitute_font(fz_context *ctx, pdf_font_desc *fontdesc, char *fontnam
 		if (!data)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find substitute font");
 
+#ifndef NOBUILTINFONT
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, 0, 1);
+#else
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, data, 0, 1);
+		free(data);
+#endif
 		fontdesc->font->ft_bold = bold && !ft_is_bold(fontdesc->font->ft_face);
 		fontdesc->font->ft_italic = italic && !ft_is_italic(fontdesc->font->ft_face);
 	}
@@ -235,7 +245,12 @@ pdf_load_substitute_cjk_font(fz_context *ctx, pdf_font_desc *fontdesc, char *fon
 
 		/* The DroidSansFallback fonts have both H and V variants in the TTC */
 		/* A glyph bbox cache is too big for DroidSansFallback (51k glyphs!) */
+#ifndef NOBUILTINFONT
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, fontdesc->wmode, 0);
+#else
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, data, 0, 1);
+		free(data);
+#endif
 	}
 
 	fontdesc->font->ft_substitute = 1;
diff --git a/source/pdf/pdf-fontfile.c b/source/pdf/pdf-fontfile.c
index 2e33768..070c331 100644
--- a/source/pdf/pdf-fontfile.c
+++ b/source/pdf/pdf-fontfile.c
@@ -14,6 +14,8 @@
 	Set NODROIDFONT to use the base 14 fonts as substitute fonts.
 */
 
+#ifndef NOBUILTINFONT
+
 #ifdef NOCJK
 #define NOCJKFONT
 #endif
@@ -151,3 +153,116 @@ pdf_lookup_substitute_cjk_font(int ros, int serif, unsigned int *len)
 	return NULL;
 #endif
 }
+
+#else // NOBUILTINFONT
+
+unsigned char *
+get_font_file(char *name)
+{
+	char *fontdir;
+	char *filename;
+	int len;
+	fontdir = getenv("FONTDIR");
+	if(fontdir == NULL) {
+		fontdir = "./fonts";
+	}
+	len = strlen(fontdir) + strlen(name) + 2;
+	filename = malloc(len);
+	if(filename == NULL) {
+		return NULL;
+	}
+	snprintf(filename, len, "%s/%s", fontdir, name);
+	return filename;
+}
+
+unsigned char *
+pdf_lookup_builtin_font(const char *name, unsigned int *len)
+{
+	*len = 0;
+	if (!strcmp("Courier", name)) {
+		return get_font_file("urw/NimbusMon-Reg.cff");
+	}
+	if (!strcmp("Courier-Bold", name)) {
+		return get_font_file("urw/NimbusMon-Bol.cff");
+	}
+	if (!strcmp("Courier-Oblique", name)) {
+		return get_font_file("urw/NimbusMon-Obl.cff");
+	}
+	if (!strcmp("Courier-BoldOblique", name)) {
+		return get_font_file("urw/NimbusMon-BolObl.cff");
+	}
+	if (!strcmp("Helvetica", name)) {
+		return get_font_file("urw/NimbusSan-Reg.cff");
+	}
+	if (!strcmp("Helvetica-Bold", name)) {
+		return get_font_file("urw/NimbusSan-Bol.cff");
+	}
+	if (!strcmp("Helvetica-Oblique", name)) {
+		return get_font_file("urw/NimbusSan-Ita.cff");
+	}
+	if (!strcmp("Helvetica-BoldOblique", name)) {
+		return get_font_file("urw/NimbusSan-BolIta.cff");
+	}
+	if (!strcmp("Times-Roman", name)) {
+		return get_font_file("urw/NimbusRom-Reg.cff");
+	}
+	if (!strcmp("Times-Bold", name)) {
+		return get_font_file("urw/NimbusRom-Med.cff");
+	}
+	if (!strcmp("Times-Italic", name)) {
+		return get_font_file("urw/NimbusRom-Ita.cff");
+	}
+	if (!strcmp("Times-BoldItalic", name)) {
+		return get_font_file("urw/NimbusRom-MedIta.cff");
+	}
+	if (!strcmp("Symbol", name)) {
+		return get_font_file("urw/StandardSymL.cff");
+	}
+	if (!strcmp("ZapfDingbats", name)) {
+		return get_font_file("urw/Dingbats.cff");
+	}
+	return NULL;
+}
+
+unsigned char *
+pdf_lookup_substitute_font(int mono, int serif, int bold, int italic, unsigned int *len)
+{
+	if (mono) {
+		if (bold) {
+			if (italic) return pdf_lookup_builtin_font("Courier-BoldOblique", len);
+			else return pdf_lookup_builtin_font("Courier-Bold", len);
+		} else {
+			if (italic) return pdf_lookup_builtin_font("Courier-Oblique", len);
+			else return pdf_lookup_builtin_font("Courier", len);
+		}
+	} else if (serif) {
+		if (bold) {
+			if (italic) return pdf_lookup_builtin_font("Times-BoldItalic", len);
+			else return pdf_lookup_builtin_font("Times-Bold", len);
+		} else {
+			if (italic) return pdf_lookup_builtin_font("Times-Italic", len);
+			else return pdf_lookup_builtin_font("Times-Roman", len);
+		}
+	} else {
+		if (bold) {
+			if (italic) return pdf_lookup_builtin_font("Helvetica-BoldOblique", len);
+			else return pdf_lookup_builtin_font("Helvetica-Bold", len);
+		} else {
+			if (italic) return pdf_lookup_builtin_font("Helvetica-Oblique", len);
+			else return pdf_lookup_builtin_font("Helvetica", len);
+		}
+	}
+}
+
+unsigned char *
+pdf_lookup_substitute_cjk_font(int ros, int serif, unsigned int *len)
+{
+	*len = 0;
+	return get_font_file("droid/DroidSansFallback.ttf");
+}
+
+void pdf_install_load_system_font_funcs(fz_context *ctx)
+{
+}
+
+#endif // NOBUILTINFONT
